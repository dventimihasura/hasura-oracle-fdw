# -*- mode: org; -*-

#+STARTUP: indent

* What

This Proof-Of-Concept (POC) project combines [[https://hasura.io/][Hasura]] with [[https://www.postgresql.org/][PostgreSQL]]
and the [[https://github.com/laurenz/oracle_fdw][oracle_fdw]] [[https://www.postgresql.org/docs/current/ddl-foreign-data.html][Foreign Data Wrapper]] in order to access an [[https://www.oracle.com/][Oracle]]
database. 

* Why

The objective is to learn more about PostgreSQL Foreign Data Wrappers
(FDW) and how they interact with Hasura.

* How

This project has these components:

- [[file:Dockerfile][Dockerfile]] :: Docker build file that creates a Docker image from
  [[https://hub.docker.com/layers/library/postgres/16.0/images/sha256-3648b6c2ac30de803a598afbaaef47851a6ee1795d74b4a5dcc09a22513b15c9][postgres:16]] with the [[https://github.com/laurenz/oracle_fdw][oracle_fdw]] extension installed.  *NOTE*: The
  build process downloads both the PostgreSQL extension and the
  necessary Oracle libraries.  Therefore, internet access is required.
- [[file:docker-compose.yaml][docker-compose.yaml]] :: Docker Compose file that launches three services:
  - oracle :: [[https://www.oracle.com/database/technologies/appdev/xe.html][Oracle XE]] database cluster
  - postgres :: [[https://www.postgresql.org/][PostgreSQL]] database cluster with ~oracle_fdw~ installed
  - graphql-engine :: [[https://hasura.io/][Hasura]] GraphQL Engine with ~postgres~ for both
    its data and its metadata
- [[file:init_oracle/01_chinook.sql][01_chinook.sql]] :: the Chinook database for Oracle
- [[file:init_postgres/01_postgres.sql][01_postgres.sql]] :: SQL script for PostgreSQL that installs the
  ~oracle_fdw~ extension, creates the [[https://www.postgresql.org/docs/current/sql-createserver.html][foreign server]], creates the
  [[https://www.postgresql.org/docs/current/sql-createusermapping.html][user-mapping]], and imports the [[https://www.postgresql.org/docs/current/sql-importforeignschema.html][foreign schema]].
- [[file:metadata][metadata]] :: Hasura metadata directory which configures the GraphQL
  API by tracking the foreign tables and setting up the necessary
  relationships between them

* Steps

** Step 1:  Clone this repository.

#+begin_src bash
  git clone https://github.com/dventimihasura/hasura-oracle-fdw.git
#+end_src

** Step 2:  Navigate to the local repository.

#+begin_src bash
  cd hasura-oracle-fdw
#+end_src

** Step 3:  Create a ~.env~ file.

#+begin_src bash
  cat <<EOF > .env
  HASURA_GRAPHQL_ENDPOINT=<your desired Hasura endpoint>
  HGEPORT=<your exposed port for the Hasura API>
  ORAPORT=<your exposed port for the Oracle DB>
  PGPORT=<your exposed port for the PostgreSQL DB>
  EOF
#+end_src

#+RESULTS:

** Step 4:  Use Docker Compose to launch the services.

#+begin_src bash
  docker-compose up -d
#+end_src

or

#+begin_src bash
  docker compose up -d
#+end_src

** Step 5:  Open Hasura Console

#+begin_src bash
  hasura console
#+end_src

** Step 6:  Test the API

#+begin_src graphql :url http://localhost:8081/v1/graphql
query MyQuery {
  chinook_customer(limit: 1) {
    email
    supportrep {
      firstname
      lastname
      title
    }
    firstname
    lastname
    invoices {
      total
      invoicelines {
        unitprice
        quantity
        track {
          name
          milliseconds
          mediatype {
            name
          }
          genre {
            name
          }
          playlisttracks {
            playlist {
              name
            }
          }
          album {
            title
            artist {
              name
            }
          }
        }
      }
    }
  }
}
#+end_src

#+RESULTS:
#+begin_example
{
  "data": {
    "chinook_customer": [
      {
        "email": "luisg@embraer.com.br",
        "supportrep": {
          "firstname": "Jane",
          "lastname": "Peacock",
          "title": "Sales Support Agent"
        },
        "firstname": "Luís",
        "lastname": "Gonçalves",
        "invoices": [
          {
            "total": 13.86,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "Já Foi",
                "milliseconds": 245681,
                "mediatype": {
                  "name": "MPEG audio file"
                },
                "genre": {
                  "name": "World"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  }
                ],
                "album": {
                  "title": "Demorou...",
                  "artist": {
                    "name": "Mônica Marianno"
                  }
                }
              }
            }
          },
          {
            "total": 8.91,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "Pretty Persuasion",
                "milliseconds": 229929,
                "mediatype": {
                  "name": "MPEG audio file"
                },
                "genre": {
                  "name": "Alternative & Punk"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  }
                ],
                "album": {
                  "title": "The Best Of R.E.M.: The IRS Years",
                  "artist": {
                    "name": "R.E.M."
                  }
                }
              }
            }
          },
          {
            "total": 3.98,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "União Da Ilha",
                "milliseconds": 330945,
                "mediatype": {
                  "name": "MPEG audio file"
                },
                "genre": {
                  "name": "Latin"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  }
                ],
                "album": {
                  "title": "Sambas De Enredo 2001",
                  "artist": {
                    "name": "Various Artists"
                  }
                }
              }
            }
          },
          {
            "total": 3.96,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "Born To Move",
                "milliseconds": 342804,
                "mediatype": {
                  "name": "MPEG audio file"
                },
                "genre": {
                  "name": "Rock"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  }
                ],
                "album": {
                  "title": "Chronicle, Vol. 2",
                  "artist": {
                    "name": "Creedence Clearwater Revival"
                  }
                }
              }
            }
          },
          {
            "total": 5.94,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "Esquinas",
                "milliseconds": 280999,
                "mediatype": {
                  "name": "MPEG audio file"
                },
                "genre": {
                  "name": "Latin"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "90’s Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Brazilian Music"
                    }
                  }
                ],
                "album": {
                  "title": "Djavan Ao Vivo - Vol. 02",
                  "artist": {
                    "name": "Djavan"
                  }
                }
              }
            }
          },
          {
            "total": 0.99,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "Don't Damn Me",
                "milliseconds": 318901,
                "mediatype": {
                  "name": "Protected AAC audio file"
                },
                "genre": {
                  "name": "Rock"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "90’s Music"
                    }
                  }
                ],
                "album": {
                  "title": "Use Your Illusion I",
                  "artist": {
                    "name": "Guns N' Roses"
                  }
                }
              }
            }
          },
          {
            "total": 1.98,
            "invoicelines": {
              "unitprice": 0.99,
              "quantity": 1,
              "track": {
                "name": "All Within My Hands",
                "milliseconds": 527986,
                "mediatype": {
                  "name": "MPEG audio file"
                },
                "genre": {
                  "name": "Metal"
                },
                "playlisttracks": [
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  },
                  {
                    "playlist": {
                      "name": "Music"
                    }
                  }
                ],
                "album": {
                  "title": "St. Anger",
                  "artist": {
                    "name": "Metallica"
                  }
                }
              }
            }
          }
        ]
      }
    ]
  }
}
#+end_example

* BONUS:  Full-text search, Custom Events, and Actions

There's now a bonus part of this POC, which illustrates Hasura Events
and Actions in order to offer full-text search with a cloud-based
search service.

Hasura events are attached to the ~chinook_artist~, ~chinook_album~,
and ~chinook_track~ foreign tables, which send inserts, updates, and
deletes to a cloud-based search service, [[https://www.algolia.com/][Algolia]].  Hasura actions are
also set up to then /search/ Algolia, and the results are turned into
GraphQL and merged into the API.

To use these features, follow these additional steps.

** Step 1:  Get set up with Algolia.

Create an Algolia account, and within it create a "search" type
appliction (it's free).  For that application, create and obtain:

- Application ID :: identifies the application
- Search-Only API Key :: public API key to use in frontend code only
  for search queries
- Admin API Key :: secret API key to use in backend code only for
  insert, update, and delete operations on search indices

** Step 2:  Add Algolia API keys to ~.env~ file.

#+begin_src bash
  cat <<EOF >> .env
  ALGOLIA_ADMIN_API_KEY=<your Algolia Admin API key>
  ALGOLIA_APPLICATION_ID=<your Algolia Application Id>
  ALGOLIA_SEARCH_ONLY_API_KEY=<your Algolia Search Only API key>
  EOF
#+end_src

** Step 3:  Generate events

The Algolia search indices will be created and maintained by DML that
occurs on the PostgreSQL foreign tables.  However, we probably want
there to be searchable indices available right after the application
is started.  To achieve that, one way is simply to invoke the event
handlers "manually" for every Artist, Album, and Track.  This can be
done with a handful of GraphQL queries whose results are massaged and
then fed back to Hasura's [[https://hasura.io/docs/latest/api-reference/metadata-api/event-triggers/#metadata-pg-invoke-event-trigger][pg_invoke_event_trigger]] API endpoint.  Note
that the following commands require [[https://www.gnu.org/software/parallel/][GNU Parallel]], [[https://curl.se/][curl]], and [[https://jqlang.github.io/jq/][jq]].

#+begin_src bash :results output
  curl -s http://localhost:8081/v1/graphql -d '{"query":"query{chinook_artist{artistid name}}","variables":{}}' \
      | jq -c '.data.chinook_artist[]|{"type":"pg_invoke_event_trigger","args": {"name":"artist_insert_update","source":"default","payload": .}}' \
      | parallel curl -s http://localhost:8081/v1/metadata -d {} \
      | jq -c '.'
#+end_src

#+begin_src bash :results output
  curl -s http://localhost:8081/v1/graphql -d '{"query":"query{chinook_album{albumid title}}","variables":{}}' \
      | jq -c '.data.chinook_album[]|{"type":"pg_invoke_event_trigger","args": {"name":"album_insert_update","source":"default","payload": .}}' \
      | parallel curl -s http://localhost:8081/v1/metadata -d {} \
      | jq -c '.'
#+end_src

#+begin_src bash :results output
  curl -s http://localhost:8081/v1/graphql -d '{"query":"query{chinook_track{trackid name}}","variables":{}}' \
      | jq -c '.data.chinook_track[]|{"type":"pg_invoke_event_trigger","args": {"name":"track_insert_update","source":"default","payload": .}}' \
      | parallel curl -s http://localhost:8081/v1/metadata -d {} \
      | jq -c '.'
#+end_src

** Step 4:  Try out a full-text search.

#+begin_src graphql :url http://localhost:8081/v1/graphql
query {
  search_artist(query: "Red") {
    artist {
      artistid
      name
    }
  }
}
#+end_src

#+RESULTS:
#+begin_example
{
  "data": {
    "search_artist": [
      {
        "artist": {
          "artistid": 127,
          "name": "Red Hot Chili Peppers"
        }
      },
      {
        "artist": {
          "artistid": 129,
          "name": "Simply Red"
        }
      }
    ]
  }
}
#+end_example

#+begin_src graphql :url http://localhost:8081/v1/graphql
query {
  search_album(query: "One") {
    album {
      albumid
      title
    }
  }
}
#+end_src

#+RESULTS:
#+begin_example
{
  "data": {
    "search_album": [
      {
        "album": {
          "albumid": 81,
          "title": "One By One"
        }
      },
      {
        "album": {
          "albumid": 5,
          "title": "Big Ones"
        }
      },
      {
        "album": {
          "albumid": 96,
          "title": "A Real Live One"
        }
      },
      {
        "album": {
          "albumid": 95,
          "title": "A Real Dead One"
        }
      }
    ]
  }
}
#+end_example

#+begin_src graphql :url http://localhost:8081/v1/graphql
query {
  search_track(query: "First") {
    track {
      trackid
      name
    }
  }
}
#+end_src

#+RESULTS:
#+begin_example
{
  "data": {
    "search_track": [
      {
        "track": {
          "trackid": 194,
          "name": "First Time I Met The Blues"
        }
      },
      {
        "track": {
          "trackid": 3448,
          "name": "Lamentations of Jeremiah, First Set \\ Incipit Lamentatio"
        }
      },
      {
        "track": {
          "trackid": 1163,
          "name": "You Ain't the First"
        }
      }
    ]
  }
}
#+end_example
